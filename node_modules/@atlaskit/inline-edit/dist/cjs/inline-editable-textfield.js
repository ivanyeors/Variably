/* inline-editable-textfield.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./inline-editable-textfield.compiled.css");
var _runtime = require("@compiled/react/runtime");
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _css = require("@atlaskit/css");
var _statusErrorError = _interopRequireDefault(require("@atlaskit/icon/core/migration/status-error--error"));
var _inlineDialog = _interopRequireDefault(require("@atlaskit/inline-dialog"));
var _compiled = require("@atlaskit/primitives/compiled");
var _textfield = _interopRequireDefault(require("@atlaskit/textfield"));
var _colors = require("@atlaskit/theme/colors");
var _inlineEdit = _interopRequireDefault(require("./inline-edit"));
var _excluded = ["errorMessage", "isInvalid"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var errorIconContainerStyles = {
  root: "_vwz41osq _y4ti12x7"
};
var readViewForTextFieldStyles = {
  root: "_11c82smr _1rjcu2gc _18zr12x7 _1e0c1txw _p12f1osq _1nmz1hna"
};
var compactStyles = {
  root: "_1rjc1b66 _18zr12x7"
};

// TODO: Fill in the component {description} and ensure links point to the correct {packageName} location.
// Remove links that the component does not have (such as usage). If there are no links remove them all.
/**
 * __Inline editable textfield__
 *
 * An inline editable textfield {description}.
 *
 * - [Examples](https://atlassian.design/components/{packageName}/examples)
 * - [Code](https://atlassian.design/components/{packageName}/code)
 * - [Usage](https://atlassian.design/components/{packageName}/usage)
 */
var InlineEditableTextfield = function InlineEditableTextfield(props) {
  var _props$isCompact = props.isCompact,
    isCompact = _props$isCompact === void 0 ? false : _props$isCompact,
    defaultValue = props.defaultValue,
    placeholder = props.placeholder,
    testId = props.testId,
    providedOnCancel = props.onCancel;
  var textFieldRef = (0, _react.useRef)();
  var onCancel = (0, _react.useCallback)(function () {
    if (textFieldRef.current) {
      textFieldRef.current.value = defaultValue || '';
    }
    providedOnCancel === null || providedOnCancel === void 0 || providedOnCancel();
  }, [defaultValue, providedOnCancel]);
  return /*#__PURE__*/_react.default.createElement(_inlineEdit.default, (0, _extends2.default)({}, props, {
    onCancel: onCancel,
    defaultValue: defaultValue,
    editView: function editView(_ref) {
      var errorMessage = _ref.errorMessage,
        isInvalid = _ref.isInvalid,
        props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
      return /*#__PURE__*/_react.default.createElement(_inlineDialog.default, {
        isOpen: isInvalid,
        content: /*#__PURE__*/_react.default.createElement("div", {
          id: "error-message"
        }, errorMessage),
        placement: "right"
      }, /*#__PURE__*/_react.default.createElement(_textfield.default, (0, _extends2.default)({}, props, {
        ref: textFieldRef,
        elemAfterInput: isInvalid && /*#__PURE__*/_react.default.createElement(_compiled.Box, {
          xcss: errorIconContainerStyles.root
        }, /*#__PURE__*/_react.default.createElement(_statusErrorError.default, {
          label: "error",
          LEGACY_primaryColor: "var(--ds-icon-danger, ".concat(_colors.R400, ")"),
          color: "var(--ds-icon-danger, #C9372C)",
          size: "small"
        })),
        testId: testId,
        isCompact: isCompact,
        autoFocus: true
      })));
    },
    readView: function readView() {
      return /*#__PURE__*/_react.default.createElement(_compiled.Box, {
        xcss: (0, _css.cx)(readViewForTextFieldStyles.root, isCompact && compactStyles.root),
        "data-compact": isCompact,
        testId: testId && "read-view-".concat(testId)
      }, defaultValue || placeholder);
    }
  }));
};
var _default = exports.default = InlineEditableTextfield;